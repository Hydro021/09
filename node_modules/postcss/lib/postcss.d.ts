import { RawSourceMap, SourceMapGenerator } from 'source-map-js'

import AtRule, { AtRuleProps } from './at-rule.js'
import Comment, { CommentProps } from './comment.js'
import Container, { ContainerProps } from './container.js'
import CssSyntaxError from './css-syntax-error.js'
import Declaration, { DeclarationProps } from './declaration.js'
import Document, { DocumentProps } from './document.js'
import Input, { FilePosition } from './input.js'
import LazyResult from './lazy-result.js'
import list from './list.js'
import Node, {
  AnyNode,
  ChildNode,
  ChildProps,
  NodeErrorOptions,
  NodeProps,
  Position,
  Source
} from './node.js'
import Processor from './processor.js'
import Result, { Message } from './result.js'
import Root, { RootProps } from './root.js'
import Rule, { RuleProps } from './rule.js'
import Warning, { WarningOptions } from './warning.js'

type DocumentProcessor = (
  document: Document,
  helper: postcss.Helpers
) => Promise<void> | void
type RootProcessor = (root: Root, helper: postcss.Helpers) => Promise<void> | void
type DeclarationProcessor = (
  decl: Declaration,
  helper: postcss.Helpers
) => Promise<void> | void
type RuleProcessor = (rule: Rule, helper: postcss.Helpers) => Promise<void> | void
type AtRuleProcessor = (atRule: AtRule, helper: postcss.Helpers) => Promise<void> | void
type CommentProcessor = (
  comment: Comment,
  helper: postcss.Helpers
) => Promise<void> | void

interface Processors {
  /**
   * Will be called on all`AtRule` nodes.
   *
   * Will be called again on node or children changes.
   */
  AtRule?: { [name: string]: AtRuleProcessor } | AtRuleProcessor

  /**
   * Will be called on all `AtRule` nodes, when all children will be processed.
   *
   * Will be called again on node or children changes.
   */
  AtRuleExit?: { [name: string]: AtRuleProcessor } | AtRuleProcessor

  /**
   * Will be called on all `Comment` nodes.
   *
   * Will be called again on node or children changes.
   */
  Comment?: CommentProcessor

  /**
   * Will be called on all `Comment` nodes after listeners
   * for `Comment` event.
   *
   * Will be called again on node or children changes.
   */
  CommentExit?: CommentProcessor

  /**
   * Will be called on all `Declaration` nodes after listeners
   * for `Declaration` event.
   *
   * Will be called again on node or children changes.
   */
  Declaration?: { [prop: string]: DeclarationProcessor } | DeclarationProcessor

  /**
   * Will be called on all `Declaration` nodes.
   *
   * Will be called again on node or children changes.
   */
  DeclarationExit?:
    | { [prop: string]: DeclarationProcessor }
    | DeclarationProcessor

  /**
   * Will be called on `Document` node.
   *
   * Will be called again on children changes.
   */
  Document?: DocumentProcessor

  /**
   * Will be called on `Document` node, when all children will be processed.
   *
   * Will be called again on children changes.
   */
  DocumentExit?: DocumentProcessor

  /**
   * Will be called on `Root` node once.
   */
  Once?: RootProcessor

  /**
   * Will be called on `Root` node once, when all children will be processed.
   */
  OnceExit?: RootProcessor

  /**
   * Will be called on `Root` node.
   *
   * Will be called again on children changes.
   */
  Root?: RootProcessor

  /**
   * Will be called on `Root` node, when all children will be processed.
   *
   * Will be called again on children changes.
   */
  RootExit?: RootProcessor

  /**
   * Will be called on all `Rule` nodes.
   *
   * Will be called again on node or children changes.
   */
  Rule?: RuleProcessor

  /**
   * Will be called on all `Rule` nodes, when all children will be processed.
   *
   * Will be called again on node or children changes.
   */
  RuleExit?: RuleProcessor
}

declare namespace postcss {
  export {
    AnyNode,
    AtRule,
    AtRuleProps,
    ChildNode,
    ChildProps,
    Comment,
    CommentProps,
    Container,
    ContainerProps,
    CssSyntaxError,
    Declaration,
    DeclarationProps,
    Document,
    DocumentProps,
    FilePosition,
    Input,
    LazyResult,
    list,
rome://policy</strong> om du vill visa listan med blockerade webbadresser och andra policyer som angetts av systemadministratören.Det finns inget stöd för protokolletKlienten och servern har inte stöd för en gemensam SSL-protokollversion eller chiffersvit.Testa att <a jsvalues="href:originURL;.jstdata:$this" onmousedown="linkClicked(this.jstdata)">besöka webbplatsens startsida</a>.Webbplatsen kan inte nåsInternetanslutningen har blockeratsInget internetDu är offlineAppen saknas eller är skadadDet går inte att nå utvecklingsservern för den här appenDet går inte att läsa in webbplatsen från cachelagringenAnslutningen avbrötsSidan på <span jscontent="hostName"></span> kan inte hittasIngen åtkomst till filen<span jscontent="hostName"></span> har blockerats<span jscontent="hostName"></span>-länkarna har blockeratsWebbsidan på <strong jscontent="failedUrl"></strong> kan ligga nere för tillfället eller kan ha flyttats permanent till en ny webbadress.<strong jscontent="hostName"></strong> tog för lång tid på sig att svara.Anslutningen  återställdes.<strong jscontent="hostName"></strong> stängde oväntat ner anslutningen.<strong jscontent="hostName"></strong> kan inte nås för tillfället.En nätverksförändring upptäcktes.<strong jscontent="hostName"></strong> avvisade anslutningen.Det gick inte att hitta IP-adressen till servern på <strong jscontent="hostName"></strong>.Webbplatsen på företagets, organisationens eller skolans intranät har samma webbadress som en extern webbplats.
    <br /><br />
    Testa med att kontakta systemadministratören.<strong jscontent="failedUrl"></strong> kan inte nås.Det går inte att läsa filen på <strong jscontent="failedUrl"></strong>. Den kan ha tagits bort eller flyttats, eller så krävs behörighet för att få åtkomst till den.Anslutningen kan ha blockerats av en brandvägg eller antivirusprogram.Något är fel med proxyservern eller så är adressen felaktig.Det gick inte att läsa den sparade (cachelagrade) kopian av webbplatsen.Datorn gick i viloläge.Det fanns ingen webbsida på webbadressen: <strong jscontent="failedUrl"></strong>Den kan ha flyttats, ändrats eller tagits bort.<strong jscontent="hostName"></strong> omdirigerade dig för många gånger.<strong jscontent="hostName"></strong> skickade ingen data.<strong jscontent="hostName"></strong> skickade ett ogiltigt svar.Det gick inte att hitta <strong jscontent="hostName"></strong>s <abbr id="dnsDefinition">DNS-adress</abbr>. Diagnostiserar problemet.Åtkomst nekades till <span jscontent="hostName"></span>.Åtkomst till filen nekadesDu är inte behörig att se den här sidan.Den kan ha flyttats eller tagits bort.Sidan fungerar inteKontakta webbplatsens ägare om problemet kvarstår.<strong jscontent="hostName"></strong> kan för närvarande inte hantera förfrågan.<strong jscontent="hostName"></strong> följer inte säkerhetsstandarderna.<strong jscontent="hostName"></strong> använder ett protokoll som inte stöds.Webbplatsen kan inte tillhandahålla en säker anslutning<strong jscontent="hostName"></strong> godkände inte inloggningscertifikatet eller så har inget inloggningscertifikat angetts.Den här sidan har blockerats av ett tilläggOrganisationen tillåter inte att du visar den här webbplatsenDet här innehållet har blockerats. Kontakta webbplatsägaren om du vill åtgärda problemet.Den här webbsidan kräver uppgifter som du har angett tidigare för att kunna visas korrekt. Du kan skicka uppgifterna igen, men om du gör det upprepas de åtgärder som har utförts av sidan tidigare.Testa attkontrollera anslutningen<a href="#buttons" onclick="toggleHelpBox()">kontrollera proxyn, brandväggen och DNS-konfigureringen</a><a href="#buttons" onclick="toggleHelpBox()">Kontrollerar proxy, brandvägg och säker DNS-konfiguration</a><a href="#buttons" onclick="toggleHelpBox()">kontrollera konfigureringarna för brandväggen och antivirusprogram</a><a href="#buttons" onclick="toggleHelpBox()">kontrollera proxyn och brandväggen</a><a href="#buttons" onclick="toggleHelpBox()">kontrollera pr */
    from?: string | undefined

    /**
     * Source map options
     */
    map?: boolean | SourceMapOptions

    /**
     * Function to generate AST by string.
     */
    parser?: Parser<RootNode> | Syntax<RootNode>

    /**
     * Class to generate string by AST.
     */
    stringifier?: Stringifier | Syntax<RootNode>

    /**
     * Object with parse and stringify.
     */
    syntax?: Syntax<RootNode>

    /**
     * The path where you'll put the output CSS file. You should always set `to`
     * to generate correct source maps.
     */
    to?: string
  }

  export type Postcss = typeof postcss

  /**
   * Default function to convert a node tree into a CSS string.
   */
  export let stringify: Stringifier

  /**
   * Parses source css and returns a new `Root` or `Document` node,
   * which contains the source CSS nodes.
   *
   * ```js
   * // Simple CSS concatenation with source map support
   * const root1 = postcss.parse(css1, { from: file1 })
   * const root2 = postcss.parse(css2, { from: file2 })
   * root1.append(root2).toResult().css
   * ```
   */
  export let parse: Parser<Root>

  /**
   * Rehydrate a JSON AST (from `Node#toJSON`) back into the AST classes.
   *
   * ```js
   * const json = root.toJSON()
   * // save to file, send by network, etc
   * const root2  = postcss.fromJSON(json)
   * ```
   */
  export let fromJSON: JSONHydrator

  /**
   * Creates a new `Comment` node.
   *
   * @param defaults Properties for the new node.
   * @return New comment node
   */
  export function comment(defaults?: CommentProps): Comment

  /**
   * Creates a new `AtRule` node.
   *
   * @param defaults Properties for the new node.
   * @return New at-rule node.
   */
  export function atRule(defaults?: AtRuleProps): AtRule

  /**
   * Creates a new `Declaration` node.
   *
   * @param defaults Properties for the new node.
   * @return New declaration node.
   */
  export function decl(defaults?: DeclarationProps): Declaration

  /**
   * Creates a new `Rule` node.
   *
   * @param default Properties for the new node.
   * @return New rule node.
   */
  export function rule(defaults?: RuleProps): Rule

  /**
   * Creates a new `Root` node.
   *
   * @param defaults Properties for the new node.
   * @return New root node.
   */
  export function root(defaults?: RootProps): Root

  /**
   * Creates a new `Document` node.
   *
   * @param defaults Properties for the new node.
   * @return New document node.
   */
  export function document(defaults?: DocumentProps): Document

  export { postcss as default }
}

/**
 * Create a new `Processor` instance that will apply `plugins`
 * as CSS processors.
 *
 * ```js
 * let postcss = require('postcss')
 *
 * postcss(plugins).process(css, { from, to }).then(result => {
 *   console.log(result.css)
 * })
 * ```
 *
 * @param plugins PostCSS plugins.
 * @return Processor to process multiple CSS.
 */
declare function postcss(plugins?: postcss.AcceptedPlugin[]): Processor
declare function postcss(...plugins: postcss.AcceptedPlugin[]): Processor

export = postcss
