p jobbra√öj lap balraM√°sodp√©ld√°nyA t√∂bbi lap bez√°r√°saJobbra l√©v≈ë lapok bez√°r√°saBalra l√©v≈ë lapok bez√°r√°saAz √∂sszes lap bez√°r√°sa{NUM_TABS,plural, =1{Webhely n√©m√≠t√°sa}other{Webhelyek n√©m√≠t√°sa}}{NUM_TABS,plural, =1{Webhely n√©m√≠t√°s√°nak felold√°sa}other{Webhelyek n√©m√≠t√°s√°nak felold√°sa}}{NUM_TABS,plural, =1{Lap hozz√°ad√°sa olvas√°si list√°hoz}other{Lapok hozz√°ad√°sa olvas√°si list√°hoz}}{NUM_TABS,plural, =1{Lap hozz√°ad√°sa csoporthoz}other{Lapok hozz√°ad√°sa csoporthoz}}{NUM_TABS,plural, =1{Lap hozz√°ad√°sa √∫j csoporthoz}other{Lapok hozz√°ad√°sa √∫j csoporthoz}}√öj csoportElt√°vol√≠t√°s a csoportb√≥l{NUM_OTHER_TABS,plural, =0{‚Äû$1‚Äù}=1{‚Äû$1‚Äù √©s 1 m√°sik lap}other{‚Äû$1‚Äù √©s # m√°sik lap}}{NUM_TABS,plural, =1{Lap √°thelyez√©se √∫j ablakba}other{Lapok √°thelyez√©se √∫j ablakba}}{NUM_TABS,plural, =1{Lap √°thelyez√©se m√°sik ablakba}other{Lapok √°thelyez√©se m√°sik ablakba}}Webhely k√∂vet√©seWebhely k√∂vet√©s√©nek megsz√ºntet√©seItt tal√°lhatja lapjait{NUM_OPEN_TABS,plural, =1{# megnyitott lap, nyomja meg a lapsor be-/kikapcsol√°s√°hoz}other{# megnyitott lap, nyomja meg a lapsor be-/kikapcsol√°s√°hoz}}Lap bez√°r√°saA lapok keres√©s√©hez kattintson ide.Keres√©s a lapokonLap bez√°rva$1 lapot tal√°ltunk$1 lap tal√°lhat√≥ a k√∂vetkez≈ëre: ‚Äû$2‚ÄùLap megnyit√°saLegut√≥bb bez√°rt lapLegut√≥bb bez√°rt lapcsoportHang √©s vide√≥Mostan√°ban bez√°rt$1 lapV√°lt√°s a nemr√©giben bez√°rt elemek k√∂z√∂ttA ‚ÄûMostan√°ban bez√°rt‚Äù szakasz kibont√°saA ‚ÄûMostan√°ban bez√°rt‚Äù szakasz √∂sszecsuk√°sa√ñsszes lapOrganize TabsCsoport l√©trehoz√°saYou can organize your tabs anytime{NUM_PAGES,plural, =0{$1}=1{$1 √©s tov√°bbi 1 lap}other{$1 √©s tov√°bbi # lap}}Lapcsoport c√≠meCsoport ment√©seCsoport ment√©s√©nek visszavon√°sa√öj lap a csoportbanCsoportos√≠t√°s megsz√ºntet√©seCsoport bez√°r√°saCsoport t√∂rl√©seCsoport √°thelyez√©se √∫j ablakbaCsoport megnyit√°sa √∫j ablakbanNevezze el a csoportotB√∂ng√©sz≈ëablak megnyit√°sa&Link m√°sol√°sa&QR-k√≥d l√©trehoz√°saFriss√≠t√©s befejez√©se√öjraind√≠t√°s a friss√≠t√©shezRendelkez√©sre √°ll az √∫j Chrome$1 ‚Äì K√©perny≈ë-megoszt√°si k√©r√©sSzeretn√©, ha a(z) $1 megosztan√° az √ñn k√©perny≈ëj√©t?Szeretn√©, ha a(z) $1 megosztan√° az √ñn k√©perny≈ëj√©t √©s a hangkimenet√©t?A(z) $1 megosztja az √ñn k√©perny≈ëj√©t.A(z) $1 megosztja a k√©perny≈ët √©s a hangot.A(z) $1 megoszt egy ablakot.A(z) $1 megosztja a Chrome egy lapj√°t.A(z) $1 megosztja a Chrome egy lapj√°t √©s a hangot.Elrejt√©sForr√°s m√≥dos√≠t√°saTan√∫s√≠tv√°ny kiv√°laszt√°saV√°lasszon tan√∫s√≠tv√°nyt a $1 hiteles√≠t√©s√©hezSeg√≠tse m√©rn√∂keinket az √∂sszeoml√°s kivizsg√°l√°s√°ban √©s kijav√≠t√°s√°ban. Ha lehet, adja meg a pontos l√©p√©seket. Nem l√©tezik t√∫l apr√≥ r√©szlet!
Visszajelz√©s megszak√≠tott lapr√≥l.
Ha t√∂bb√© nem akar hozz√°f√©rni ehhez a programhoz, el kell t√°vol√≠tania azt a Vez√©rl≈ëpulton a(z) $1 seg√≠ts√©g√©vel.

Elind√≠tja a k√∂vetkez≈ët: $1?B√∂ng√©sz≈ëdet a sz√ºl≈ëd kezeliBe√°ll√≠tottuk kezd≈ëoldal√°t.Ezt a be√°ll√≠t√°st a(z) ‚Äû$1‚Äù b≈ëv√≠tm√©ny k√©nyszer√≠ti ki.Ezt a be√°ll√≠t√°st egy b≈ëv√≠tm√©ny k√©nyszer√≠ti ki.A rendszergazda javaslat√°t fogadja el enn√©l a be√°ll√≠t√°sn√°l.Rendszergazd√°ja egy meghat√°rozott √©rt√©ket javasol ehhez a be√°ll√≠t√°shoz.Ez a be√°ll√≠t√°s nem √°ll rendelkez√©sre a fi√≥kj√°ban.Ezt a be√°ll√≠t√°st sz√ºl≈ë kezeli.Nem a Chrome Internetes √°ruh√°zb√≥l sz√°rmazik.Harmadik f√©l telep√≠tette.V√°llalati h√°zirend √°ltal telep√≠tve.Telep√≠tve az ezt n√©lk√ºl√∂zni nem tud√≥ b≈ëv√≠tm√©ny(ek) miatt.Ez a b≈ëv√≠tm√©ny rosszindulat√∫ programot tartalmaz.Ez a b≈ëv√≠tm√©ny komoly biztons√°gi r√©st tartalmaz.A b≈ëv√≠tm√©ny s√©rti a Chrome Web√°ruh√°z ir√°nyelv√©t.A Chrome letiltotta. Ez a b≈ëv√≠tm√©ny nem biztons√°gos.Tov√°bbi inform√°ci√≥ a Biztons√°gos B√∂ng√©sz√©s fokozott v√©delemmel funkci√≥r√≥l.Tov√°bbi inform√°ci√≥ a hozz√°f√©r√©si k√©relmekr≈ël.Ez a m≈±velet vissza√°ll√≠tja a kezd≈ëoldalt, az √∫j lap oldalt, a keres≈ëmotort √©s a r√∂gz√≠tett lapokat. Kikapcsol tov√°bb√° minden b≈ëv√≠tm√©nyt, √©s t√∂rli az ideiglenes adatokat, p√©ld√°ul a cookie-kat. K√∂nyvjelz≈ëi, el≈e: name,
        before: value.slice(parenthesesOpenPos + 1, next),
      }
      pos = next

      if (name === 'url' && code !== singleQuote && code !== doubleQuote) {
        next -= 1
        do {
          escape = false
          next = value.indexOf(')', next + 1)
          if (~next) {
            escapePos = next
            while (value.charCodeAt(escapePos - 1) === backslash) {
              escapePos -= 1
              escape = !escape
            }
          } else {
            value += ')'
            next = value.length - 1
            token.unclosed = true
          }
        } while (escape)
        // Whitespaces before closed
        whitespacePos = next
        do {
          whitespacePos -= 1
          code = value.charCodeAt(whitespacePos)
        } while (code <= 32)
        if (parenthesesOpenPos < whitespacePos) {
          if (pos !== whitespacePos + 1) {
            token.nodes = [
              {
                type: 'word',
                sourceIndex: pos,
                sourceEndIndex: whitespacePos + 1,
                value: value.slice(pos, whitespacePos + 1),
              },
            ]
          } else {
            token.nodes = []
          }
          if (token.unclosed && whitespacePos + 1 !== next) {
            token.after = ''
            token.nodes.push({
              type: 'space',
              sourceIndex: whitespacePos + 1,
              sourceEndIndex: next,
              value: value.slice(whitespacePos + 1, next),
            })
          } else {
            token.after = value.slice(whitespacePos + 1, next)
            token.sourceEndIndex = next
          }
        } else {
          token.after = ''
          token.nodes = []
        }
        pos = next + 1
        token.sourceEndIndex = token.unclosed ? next : pos
        code = value.charCodeAt(pos)
        tokens.push(token)
      } else {
        balanced += 1
        token.after = ''
        token.sourceEndIndex = pos + 1
        tokens.push(token)
        stack.push(token)
        tokens = token.nodes = []
        parent = token
      }
      name = ''

      // Close parentheses
    } else if (closeParentheses === code && balanced) {
      pos += 1
      code = value.charCodeAt(pos)

      parent.after = after
      parent.sourceEndIndex += after.length
      after = ''
      balanced -= 1
      stack[stack.length - 1].sourceEndIndex = pos
      stack.pop()
      parent = stack[balanced]
      tokens = parent.nodes

      // Words
    } else {
      next = pos
      do {
        if (code === backslash) {
          next += 1
        }
        next += 1
        code = value.charCodeAt(next)
      } while (
        next < max &&
        !(
          code <= 32 ||
          code === singleQuote ||
          code === doubleQuote ||
          code === comma ||
          code === colon ||
          code === slash ||
          code === openParentheses ||
          (code === star && parent && parent.type === 'function' && true) ||
          (code === slash && parent.type === 'function' && true) ||
          (code === closeParentheses && balanced)
        )
      )
      token = value.slice(pos, next)

      if (openParentheses === code) {
        name = token
      } else if (
        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&
        plus === token.charCodeAt(1) &&
        isUnicodeRange.test(token.slice(2))
      ) {
        tokens.push({
          type: 'unicode-range',
          sourceIndex: pos,
          sourceEndIndex: next,
          value: token,
        })
      } else {
        tokens.push({
          type: 'word',
          sourceIndex: pos,
          sourceEndIndex: next,
          value: token,
        })
      }

      pos = next
    }
  }

  for (pos = stack.length - 1; pos; pos -= 1) {
    stack[pos].unclosed = true
    stack[pos].sourceEndIndex = value.length
  }

  return stack[0].nodes
}
